import OpenAI from "openai";
import fs from "fs";
import path from "path";

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "", // Load your API key from environment variables
});

/**
 * Generate a variation of a band's logo.
 * @param logoPath - The path to the band's logo file (must be PNG and 512x512).
 * @param prompt - A prompt describing the style or theme of the variations.
 * @returns A Promise that resolves with a Buffer containing the generated image.
 */

export async function generateLogoVariation(
  logoPath: string,
  prompt: string
): Promise<Buffer> {
  try {
    // Read the logo file
    const logoFile = fs.readFileSync(logoPath); // Read the logo as a buffer
    const base64Logo = logoFile.toString("base64"); // Convert to base64 for upload

    // Generate a variation using DALLÂ·E
    const response = await openai.images.generate({
      prompt: prompt,
      n: 1, // Number of variations
      size: "512x512",
      user: "band-rehearsal-logo", // Optional user identifier
    });

    // Extract the generated image URL
    const imageUrl = response.data[0]?.url;

    if (!imageUrl) {
      throw new Error("No image was generated by the API.");
    }

    // Fetch the image data from the URL
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.arrayBuffer();

    // Convert ArrayBuffer to Buffer
    return Buffer.from(imageBuffer);
  } catch (error) {
    console.error("Error generating logo variation:", error);
    throw error;
  }
}
